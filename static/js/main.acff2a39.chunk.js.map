{"version":3,"sources":["common/pages/NoMatch.tsx","Home.tsx","lib/mdConvert.tsx","lesson-1/description/Description.tsx","lesson-1/widgets/InputWidget.tsx","lesson-1/Lesson1.tsx","lesson-2/description/Description.tsx","lesson-2/model/counter.tsx","lesson-2/widgets/InputWidget.tsx","lesson-2/Lesson2.tsx","App.tsx","serviceWorker.ts","index.tsx","lesson-1/Lesson1.module.scss","lesson-2/Lesson2.module.scss","lesson-1/widgets/InputWidget.module.scss","lesson-2/widgets/InputWidget.module.scss","App.module.scss","common/pages/NoMatch.module.scss"],"names":["NoMatch","react_default","a","createElement","className","styles","noMatch","Home","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","href","React","Component","md","MarkdownIt","highlight","block","content","languages","javascript","concat","MDConvert","_ref","markdown","children","dangerouslySetInnerHTML","__html","render","codeWrapper","Description","part1","Fragment","mdConvert_MDConvert","InputWidget","change","add","remove","inputValue","react","buttons","index_es","variant","onClick","type","onChange","_ref2","currentTarget","Lesson1","props","_this","call","state","totalValue","setState","currentState","_this2","_this$state","css","lesson1","codeDemo","output","InputWidget_InputWidget","val","Description_Description","Counter","initialScope","listeners","scope","_this$scope","result","set","_this$scope2","forEach","handler","listener","toConsumableArray","counter","leftButtonLabel","leftButtonHandler","rightButtonLabel","rightButtonHandler","inputChange","initialState","Lesson2","get","update","widgets_InputWidget_InputWidget","description_Description_Description","App","selectedIndex","handleListItemClick","ev","index","HashRouter","basename","process","container","spacing","item","sm","xs","component","Link","to","button","selected","Switch","Route","exact","path","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.acff2a39.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './NoMatch.module.scss';\n\nexport const NoMatch = () => {\n    return (\n        <div className={styles.noMatch}>404 page</div>\n    );\n};\n","import React from 'react';\n\nexport class Home extends React.Component {\n\n    render() {\n        return (\n            <div>\n                <h1>Welcome to React Typescript tutorial</h1>\n                <p>This tutorial aims to create a step by step examples on how to build a scalable one-page application\n                    with functional programming pattern in mind</p>\n                <p>In the following lessons, we will extend counter from a single component to fully scalable MVVM app\n                    by using React as dom manipulation library</p>\n                <p>You can see the source code in Github:\n                    <a href=\"https://github.com/Shwartz/react-ts-lessons\">\n                        https://github.com/Shwartz/react-ts-lessons\n                    </a>\n                </p>\n\n                <h4>Lesson 1</h4>\n                <p>Counter widget built based on ReactJS documentation</p>\n\n                <h4>Lesson 2</h4>\n                <p>The same Counter widget however we moving out logic into a model.</p>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import MarkdownIt from 'markdown-it';\nimport {highlight, languages} from 'prismjs';\nimport React from 'react';\n\nconst wrap = (content: string) => `<pre class=\"language-javascript\">${content}</pre>`;\nconst md = new MarkdownIt({\n    highlight(block: string) {\n        return wrap(highlight(block, languages.javascript));\n    }\n});\n\nconst convert = (markdown: string) => md.render(markdown);\n\ninterface Iprops {\n    children: string;\n}\n\nexport const MDConvert = ({children}: Iprops) => (<div dangerouslySetInnerHTML={{__html: convert(children)}}/>);\n\nexport const codeWrapper = (content: string) => `\n\\`\\`\\`javascript\n${content}\n\\`\\`\\`\n`;\n","import React from 'react';\nimport {codeWrapper, MDConvert} from '../../lib/mdConvert';\n\nexport const Description = () => {\n    const part1 = `\n\n### Description\n\nWe will use a Counter Widget with three methods such as Add, Remove, Input and show a Total amount after a calculation.\n\n### What will you learn\n\n - How to use the *\\`setState\\`* method for *\\`React.Component\\`*\n - Use of Arrow functions in *\\`Render()\\`* method and in props\n - Use of Typescript types for Stateless Components, interface definition and props\n\n\n### Source\n\n[https://github.com/Shwartz/react-ts-lessons/tree/master/src/lesson-1](https://github.com/Shwartz/react-ts-lessons/tree/master/src/lesson-1)\n\n\n## Methods in Class (React.Component)\n\n> *\\`React.Component\\`* is a Javascript Class.\n\n> *\\`Stateless Component\\`* is a function, with a return type of React element.\n\nIt is crucial to define Prototype methods in Javascript class with *\\`mehtodName(){}\\`*, instead of *\\`methodName = () => {}\\`*.\nSecond example will assign a default value by initialising a Class.\n\nLet's take a closer look at the setState method.\n\nAs per documentation:\n> *\\`this.props\\`* and *\\`this.state\\`* may be updated asynchronously; you should not rely on their values for calculating the next state.\n\n[ReactJS.org: State updates may be asynchronous](https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous)\n\n\n${codeWrapper(`\n    ...\n    private add() {\n        const {inputValue, totalValue} = this.state;\n        const result = inputValue + totalValue;\n        this.setState(\n            {\n                inputValue,\n                totalValue: result\n            }\n        );\n    }\n    ...\n`)}\n\nsetState() API accepts Object and Function. The previous example use Object to update state. Nothing wrong with an example but it could fail in some situations (also described in the documentation).\n\nThe recommended way by using Function.\n\n${codeWrapper(`\n    ...\n    private add() {\n        this.setState((currentState: IState) => {\n            const {inputValue, totalValue} = currentState;\n            const result = inputValue + totalValue;\n            return {inputValue, totalValue: result};\n        });\n    }\n    ...\n`)}\n\nCallback in *\\`setState\\`* according to API returns current State and Props. That means you will be safe in the asynchronous application.\n\nWhen using this approach, there is no need for *\\`this\\`* statement inside the callback.\n\n\nThere is nothing wrong to use *\\`setState\\`* with a passing Object. Use this approach when you do not depend on a current State.\n\n${codeWrapper(`\n    ...\n    totalValue(value: number) {\n        this.setState({\n            inputValue: value\n        });\n    }\n    ...\n`)}\n\n## Render method\n\n>There are some rumours about performance issues when using arrow function inside the method you passing to a component. Since this is a sensitive subject, I suggest to read this article, and that should settle any doubts.\n> [React, Inline Functions, and Performance](https://cdb.reacttraining.com/react-inline-functions-and-performance-bdff784f5578)\n\nThe recommended approach to defining all the State values at the top of the render() function\n\n${codeWrapper(`\n    ...\n    render() {\n        const {inputValue, totalValue} = this.state;\n    ...\n`)}\n\nInstead of passing methods to another React component use callback in your component. This way you won't need to pass *\\`this\\`* around or even worse to use an ugly *\\`.bind(this)\\`*.\n\n\n${codeWrapper(`\n    ...\n    add={() => {\n            this.add()\n        }}\n    ...\n`)}\n\nIn our case, we do not use a callback. Therefore we could write arrow function without closure.\n\n*\\`() => this.add() \\`*\n\nHowever, to make code consistent, I suggest using closers always like in the example above.\n\nFor a case when callback returns an argument, it would make sense to show returning type.\n\n${codeWrapper(`\n    <InputWidget\n    ...\n        change={(val: number) => {\n            return this.totalValue(val)\n            }\n        }\n    />\n`)}\n\n## Stateless Components\n\nTo use the full power of a Typescript add types to all props. By adding types, you will help to avoid extra type check and depends on your favourite Editor/IDE it might show all types in advance which is pretty awesome.\n\nIn our widget, we have three callbacks and one static value, which is a number.\n\n${codeWrapper(`\n    interface IProps {\n        change: (value: number) => void;\n        add: () => void;\n        remove: () => void;\n        inputValue: number;\n    }\n`)}\n\nTo use the full power of a Typescript add types to all props. By adding types, you will help to avoid extra type check and depends on your favourite Editor/IDE it might show all types in advance which is pretty awesome.\n\nIn our widget, we have three callbacks and one static value, which is a number.\n\n${codeWrapper(`\n    <Button\n        ...\n        onClick={() => {\n            add();\n        }}\n    >\n`)}\n\nLet's explore onChange handler in the Input component\n\n${codeWrapper(`\n    <Input\n        ...\n        onChange={({currentTarget}) => {\n            change(+currentTarget.value);\n        }}\n        ...\n    />\n`)}\nThe *\\`onChange\\`* returns *\\`React.ChangeEvent\\`* as an argument. We are interested in value which we can get from *\\`currentTarget.value\\`*. The problem is that this property return type is a string. So, we need to convert it to a number which is done by adding *\\`+\\`* sign.\n\n## Improvements\n\nSo, we have a cute tiny widget which can calculate some value. We can change the value what we want to add or remove from the total. What if we're going to reuse this widget inside in some other component?\n\nIn that case, we would need to copy over all the methods.\n\nWhat if we want the same component but instead of add or remove to have other operations? So, we would need to change a label and add new methods.\n\nThis approach could become messy as we would create similar but not the same Components and in some case, they would do one thing in other case something else.  How to write tests for this approach?\n\nLet's move to Lesson 2 and try to improve our Counter Widget.\n`;\n\n    return (\n        <React.Fragment>\n            <MDConvert>{part1}</MDConvert>\n            <p className=\"end\">~ ~ ~ end ~ ~ ~</p>\n        </React.Fragment>\n    );\n};\n","import {Button, Input} from '@material-ui/core';\nimport React, {Fragment} from 'react';\nimport styles from './InputWidget.module.scss';\n\ninterface IProps {\n    change: (value: number) => void;\n    add: () => void;\n    remove: () => void;\n    inputValue: number;\n}\n\nexport const InputWidget = ({change, add, remove, inputValue}: IProps) => {\n    return (\n        <Fragment>\n            <div className={styles.buttons}>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        remove();\n                    }}\n                >\n                    Remove {inputValue}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        add();\n                    }}\n                >\n                    Add {inputValue}\n                </Button>\n            </div>\n            <Input\n                type=\"number\"\n                value={inputValue}\n                onChange={({currentTarget}) => {\n                    change(+currentTarget.value);\n                }}\n                className={styles.inputValue}\n            />\n        </Fragment>\n    );\n};\n","import React, {Component} from 'react';\nimport {Description} from './description/Description';\nimport {InputWidget} from './widgets/InputWidget';\n\nimport css from './Lesson1.module.scss';\n\ninterface IProps {\n}\n\ninterface IState {\n    inputValue: number;\n    totalValue: number;\n}\n\nclass Lesson1 extends Component {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    state: IState = {\n        inputValue: 5,\n        totalValue: 0\n    };\n\n    private add() {\n        this.setState((currentState: IState) => {\n            const {inputValue, totalValue} = currentState;\n            const result = inputValue + totalValue;\n            return {inputValue, totalValue: result};\n        });\n    }\n\n    private remove() {\n        this.setState((currentState: IState) => {\n            const {inputValue, totalValue} = currentState;\n            const result = totalValue - inputValue;\n            return {inputValue, totalValue: result};\n        });\n    }\n\n    private totalValue(value: number) {\n        this.setState({\n            inputValue: value\n        });\n    }\n\n    render() {\n        const {inputValue, totalValue} = this.state;\n        return (\n            <div className={css.lesson1}>\n                <h1>Lesson 1 - Simple counter</h1>\n\n                <h3>Counter Widget demo</h3>\n\n                <div className={css.codeDemo}>\n                    <p className={css.output}>Total: {totalValue}</p>\n                    <InputWidget\n                        add={() => {\n                            this.add();\n                        }}\n                        remove={() => {\n                            this.remove();\n                        }}\n                        inputValue={inputValue}\n                        change={(val: number) => {\n                            this.totalValue(val);\n                        }}\n                    />\n                </div>\n\n                <Description/>\n            </div>\n        );\n    }\n}\n\nexport default Lesson1;\n","import React from 'react';\nimport {codeWrapper, MDConvert} from '../../lib/mdConvert';\n\nconst part1 = `\n### Description\n\nThis is the same Counter Widget with the same methods. However, we are going to abstract Labels and Namings for the widget which would give as reusable Widget. We will introduce the Model which will keep methods for the widget separate to avoid copy/paste when re-using widget.\n\n### What will you learn\n\n - Create counter Class and move functionality outside Component\n - Handle communication between counter Class and Component\n\n### Source\n\n[https://github.com/Shwartz/react-ts-lessons/tree/master/src/lesson-2](https://github.com/Shwartz/react-ts-lessons/tree/master/src/lesson-2)\n\n## Counter Class\n\nLet's move all functionality outside to the Counter component.\n\n> The main advantage is that functionality doesn't depend on ReactJS and you can use directly to React Native or any other library or framework. Counter component won't change.\n\nA current example is just a small use case. However, imagine an enterprise level app in an agile dev environment where functionality changes are a day to day requirement.\n\nLet's create Counter Object where we can collect *\\`inputValue\\`* and *\\`totalValue\\`*.\n\n${codeWrapper(`\nexport interface IScope {\n    inputValue: number;\n    totalValue: number;\n}\n    ...\n`)}\n\n> Observables are declarative - that is, you define a function for publishing values, but a function won't be executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.\n\nTo match basic observable, we need 4 methods *\\`get()\\`*, *\\`set()\\`*, *\\`subscribe()\\`*, *\\`clear()\\`* and of ourse *\\`constructor()\\`* to initialise class.\n\n> Here you can read more about mutation side effects: [https://benmccormick.org/2016/06/04/what-are-mutable-and-immutable-data-structures-2](https://benmccormick.org/2016/06/04/what-are-mutable-and-immutable-data-structures-2)\n\n${codeWrapper(`\nclass Counter {\n    private listeners: TCallback[];\n    private scope: IScope;\n\n    constructor() {\n    }\n\n    set() {\n    }\n\n    get() {\n    }\n\n    update() {\n    }\n\n    clear() {\n    }\n}    ...\n`)}\n\nScope and handlers initialised for handling class state.\n\nIn a *\\`constructor\\`*, we set *\\`initialScope\\`* which is mandatory.\n\n${codeWrapper(`\n...\nconstructor(initialScope: IScope) {\n    this.scope = initialScope;\n}\n...\n`)}\n\nThen methods *\\`set\\`* and *\\`get\\`* will handle scope updates.\n\n${codeWrapper(`\n...\nset(scope: IScope) {\n    this.scope = scope;\n    this.listeners.forEach((handler) => {\n        handler(scope);\n    });\n}\n\nget() {\n    return this.scope;\n}\n...\n`)}\n\nNow, since we have *\\`subscribe()\\`* method, any time, we call *\\`set()\\`* method all listeners will receive notification callback, with a current scope as an argument.\n\nAlso *\\`get()\\`* method is useful when you need to know the current scope.\n\nIn context to React, we will use *\\`get()\\`* to initialise state in Component. And add the listener in *\\`subscribe()\\`* method, to setState.\n\n${codeWrapper(`\n// example from Lesson2.tsx\n...\nthis.counter.update((scope: IScope) => {\n    this.setState(scope);\n});\n...\n`)}\n\nSo, here we are collecting listeners, with the *\\`update()\\`* method.\n${codeWrapper(`\n...\nupdate(listener: TCallback) {\n    this.listeners = [...this.listeners, listener];\n}\n\nclear() {\n    this.handlers = [];\n}\n...\n`)}\n\nSince we created a method to *\\`update()\\`* we need to create a method to remove as well. Therefore there is *\\`clear()\\`* to remove all the handlers before we are removing a component.\n\nNow, we have a class, with getters and setters. However, regards to the counter, there is no counter functionality yet.\n\nLike I explained above, to avoid side effects, we are updating the entire Object, not a part of it.\n\n${codeWrapper(`\n...\nadd() {\n    const {inputValue, totalValue} = this.scope;\n    const result = inputValue + totalValue;\n    this.set({inputValue, totalValue: result});\n}\n\nremove() {\n    const {inputValue, totalValue} = this.scope;\n    const result = totalValue - inputValue;\n    this.set({inputValue, totalValue: result});\n}\n\ninputChange(value: number) {\n    const {totalValue} = this.scope;\n    this.set({inputValue: value, totalValue});\n}\n...\n`)}\n\n> There is a place for improvements but let's leave that for the Lesson3\n\nHere is a full class.\n\n\n${codeWrapper(`\nexport interface IScope {\n    inputValue: number;\n    totalValue: number;\n}\n\ntype TCallback = (scope: IScope) => void;\n\nclass Counter {\n    private listeners: TCallback[] = [];\n    private scope: IScope;\n\n    constructor(initialScope: IScope) {\n        this.scope = initialScope;\n    }\n\n    add() {\n        const {inputValue, totalValue} = this.scope;\n        const result = inputValue + totalValue;\n        this.set({inputValue, totalValue: result});\n    }\n\n    remove() {\n        const {inputValue, totalValue} = this.scope;\n        const result = totalValue - inputValue;\n        this.set({inputValue, totalValue: result});\n    }\n\n    inputChange(value: number) {\n        const {totalValue} = this.scope;\n        this.set({inputValue: value, totalValue});\n    }\n\n    set(scope: IScope) {\n        this.scope = scope;\n        this.listeners.forEach((listener) => {\n            listener(scope);\n        });\n    }\n\n    get() {\n        return this.scope;\n    }\n\n    update(listener: TCallback) {\n        this.listeners = [...this.listeners, listener];\n    }\n\n    clear() {\n        this.listeners = [];\n    }\n}\n\nexport const counter = (initialScope: IScope) => new Counter(initialScope);\n`)}\n\n\nIn case you wonder about this line\n\n*\\`export const counter = (initialScope: IScope) => new Counter(initialScope);\\`*\n\nInitialising is done to avoid using *\\`new\\`* every time we are using a Counter component, kind of shortcut.\n\n\nIn Lesson2 class, we don't need to add any more methods. We connect (don't want to use the word *\\`hook\\`* :)) together *\\`setState\\`* and *\\`counter.update\\`*.\n\n${codeWrapper(`\n...\nconst initialState: IScope = {\n    inputValue: 5,\n    totalValue: 0\n};\n\nexport class Lesson2 extends Component<IProps> {\nstate: IScope;\ncounter = counter(initialState);\n\nconstructor(props: IProps) {\n    super(props);\n    this.state = this.counter.get();\n    this.counter.update((scope: IScope) => {\n        this.setState(scope);\n    });\n}\n...\n`)}\n\nIn Counter component, we initialise counter observable, with a new set of initial values. Next step is to add, those initial values to state Object in Component. Also, we need to subscribe to observable. This subscription will update state, any time we will make changes inside Observable.\n\n${codeWrapper(`\n\n...\nrender() {\n    const {inputValue, totalValue} = this.state;\n\n    return (\n        <div className={styles.Lesson2}>\n            <h1>Lesson 2 - Simple Counter</h1>\n\n            <h3>Counter Widget Demo</h3>\n\n            <div className={styles.codeDemo}>\n                <p className={styles.output}>Total: {totalValue}</p>\n                <InputWidget\n                    leftButtonHandler={\n                        () => {\n                            this.counter.remove();\n                        }\n                    }\n                    rightButtonHandler={\n                        () => {\n                            this.counter.add();\n                        }\n                    }\n                    leftButtonLabel={\\`Remove\\`}\n                    rightButtonLabel={\\`Add\\`}\n                    inputChange={\n                        (value: number) => {\n                            this.counter.inputChange(value);\n                        }\n                    }\n                    inputValue={inputValue}\n                />\n            </div>\n\n            <Description />\n        </div>\n    );\n}\n...\n`)}\n\nNow, we have reusable, stateless component, with custom labels, and no more named methods.\n\n### Space to improve\n\nIn our tutorial, we are moving forward in small steps. Therefore some parts are missing, and you might notice that.\n\nFor example:\n- We are not checking if a new object is the same.\n- The *\\`get()\\`* method doesn't clone the object but return the same instance.\n- Subscribe should return *\\`remove()\\`* method.\n\nOur target is to implement a functional approach, and more code will become obsolete in the next lessons\n\n`;\n\nexport const Description = () => {\n    return (\n        <React.Fragment>\n            <MDConvert>{part1}</MDConvert>\n            <p className=\"end\">~ ~ ~ end ~ ~ ~</p>\n        </React.Fragment>\n    );\n};\n","export interface IScope {\n    inputValue: number;\n    totalValue: number;\n}\n\ntype TCallback = (scope: IScope) => void;\n\nclass Counter {\n    private listeners: TCallback[] = [];\n    private scope: IScope;\n\n    constructor(initialScope: IScope) {\n        this.scope = initialScope;\n    }\n\n    add() {\n        const {inputValue, totalValue} = this.scope;\n        const result = inputValue + totalValue;\n        this.set({inputValue, totalValue: result});\n    }\n\n    remove() {\n        const {inputValue, totalValue} = this.scope;\n        const result = totalValue - inputValue;\n        this.set({inputValue, totalValue: result});\n    }\n\n    inputChange(value: number) {\n        const {totalValue} = this.scope;\n        this.set({inputValue: value, totalValue});\n    }\n\n    set(scope: IScope) {\n        this.scope = scope;\n        this.listeners.forEach((handler) => {\n            handler(scope);\n        });\n    }\n\n    get() {\n        return this.scope;\n    }\n\n    update(listener: TCallback) {\n        this.listeners = [...this.listeners, listener];\n    }\n\n    clear() {\n        this.listeners = [];\n    }\n}\n\nexport const counter = (initialScope: IScope) => new Counter(initialScope);\n","import {Button, Input} from '@material-ui/core';\nimport React, {Fragment} from 'react';\nimport styles from './InputWidget.module.scss';\n\ninterface IProps {\n    leftButtonLabel: string;\n    leftButtonHandler: () => void;\n    rightButtonLabel: string;\n    rightButtonHandler: () => void;\n    inputValue: number;\n    inputChange: (value: number) => void;\n}\n\nexport const InputWidget = (\n    {\n        leftButtonLabel,\n        leftButtonHandler,\n        rightButtonLabel,\n        rightButtonHandler,\n        inputValue,\n        inputChange\n    }: IProps) => {\n\n    return (\n        <Fragment>\n            <div className={styles.buttons}>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        leftButtonHandler();\n                    }}\n                >{leftButtonLabel} {inputValue}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        rightButtonHandler();\n                    }}\n                >{rightButtonLabel} {inputValue}\n                </Button>\n            </div>\n            <Input\n                type=\"number\"\n                value={inputValue}\n                onChange={\n                    ({currentTarget: {value}}) => {\n                        inputChange(+value);\n                    }}\n                className={styles.inputValue}\n            />\n        </Fragment>\n    );\n};\n","import React, {Component} from 'react';\nimport {Description} from './description/Description';\nimport {counter, IScope} from './model/counter';\nimport {InputWidget} from './widgets/InputWidget';\n\nimport styles from './Lesson2.module.scss';\n\ninterface IProps {\n}\n\nconst initialState: IScope = {\n    inputValue: 5,\n    totalValue: 0\n};\n\nclass Lesson2 extends Component<IProps> {\n    state: IScope;\n    counter = counter(initialState);\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = this.counter.get();\n        this.counter.update((scope: IScope) => {\n            this.setState(scope);\n        });\n    }\n\n    render() {\n        const {inputValue, totalValue} = this.state;\n\n        return (\n            <div className={styles.Lesson2}>\n                <h1>Lesson 2 - Simple Counter</h1>\n\n                <h3>Counter Widget Demo</h3>\n\n                <div className={styles.codeDemo}>\n                    <p className={styles.output}>Total: {totalValue}</p>\n                    <InputWidget\n                        leftButtonLabel={`Remove`}\n                        leftButtonHandler={\n                            () => {\n                                this.counter.remove();\n                            }\n                        }\n                        rightButtonLabel={`Add`}\n                        rightButtonHandler={\n                            () => {\n                                this.counter.add();\n                            }\n                        }\n                        inputValue={inputValue}\n                        inputChange={\n                            (value: number) => {\n                                this.counter.inputChange(value);\n                            }\n                        }\n                    />\n                </div>\n\n                <Description />\n            </div>\n        );\n    }\n}\n\nexport default Lesson2;\n","import {CssBaseline, Grid, List, ListItem} from '@material-ui/core';\nimport React, {Component} from 'react';\nimport {HashRouter as Router, Link, Route, Switch} from 'react-router-dom';\nimport styles from './App.module.scss';\nimport {NoMatch} from './common/pages/NoMatch';\nimport './common/prism.css';\n\nimport Home from './Home';\nimport Lesson1 from './lesson-1/Lesson1';\nimport Lesson2 from './lesson-2/Lesson2';\n\nclass App extends Component {\n    state = {\n        selectedIndex: 0,\n    };\n\n    handleListItemClick = (ev: React.MouseEvent, index: number) => {\n        this.setState({selectedIndex: index});\n    };\n\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <div className={styles.App}>\n                    <CssBaseline/>\n                    <Grid container={true} spacing={16}>\n                        <Grid item={true} sm={4} xs={12}>\n                            <List component=\"nav\">\n                                <Link to=\"/\">\n                                    <ListItem\n                                        button={true}\n                                        selected={this.state.selectedIndex === 1}\n                                        onClick={(ev) => this.handleListItemClick(ev, 1)}\n                                    >\n                                        Home\n                                    </ListItem>\n                                </Link>\n                                <Link to=\"/lesson-1\">\n                                    <ListItem\n                                        button={true}\n                                        selected={this.state.selectedIndex === 2}\n                                        onClick={(ev) => this.handleListItemClick(ev, 2)}\n                                    >\n                                        Lesson 1 - Simple counter\n                                    </ListItem>\n                                </Link>\n                                <Link to=\"/lesson-2\">\n                                    <ListItem\n                                        button={true}\n                                        selected={this.state.selectedIndex === 3}\n                                        onClick={(ev) => this.handleListItemClick(ev, 3)}\n                                    >\n                                        Lesson 2 - Simple counter\n                                    </ListItem>\n                                </Link>\n                            </List>\n                        </Grid>\n                        <Grid item={true} sm={8} xs={12}>\n                            <section>\n                                <Switch>\n                                    <Route exact={true} path=\"/\" component={Home}/>\n                                    <Route path=\"/lesson-1\" component={Lesson1}/>\n                                    <Route path=\"/lesson-2\" component={Lesson2}/>\n                                    <Route component={NoMatch}/>\n                                </Switch>\n                            </section>\n                        </Grid>\n                    </Grid>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface IConfig {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    /*console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );*/\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            /*console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );*/\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            // console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            // console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            /*console.log(\n                'No internet connection found. App is running in offline mode.'\n            );*/\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeDemo\":\"Lesson1_codeDemo__zcOLr\",\"output\":\"Lesson1_output__3XlSb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeDemo\":\"Lesson2_codeDemo__3N42R\",\"output\":\"Lesson2_output__22E_1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputValue\":\"InputWidget_inputValue__GK9Hf\",\"buttons\":\"InputWidget_buttons__2HfxO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputValue\":\"InputWidget_inputValue__3o0J0\",\"buttons\":\"InputWidget_buttons__r5n5S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1OPrb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noMatch\":\"NoMatch_noMatch__2EWDO\"};"],"sourceRoot":""}