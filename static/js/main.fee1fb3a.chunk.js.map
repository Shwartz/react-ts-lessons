{"version":3,"sources":["common/pages/NoMatch.module.scss","common/pages/NoMatch.tsx","Home.tsx","lesson-1/description/Description.tsx","lesson-1/widgets/InputWidget.tsx","lesson-1/Lesson1.tsx","lesson-2/description/Description.tsx","lesson-2/model/counter.tsx","lesson-2/widgets/InputWidget.tsx","lesson-2/Lesson2.tsx","App.tsx","serviceWorker.ts","index.tsx","lesson-1/Lesson1.module.scss","lesson-2/Lesson2.module.scss","lesson-1/widgets/InputWidget.module.scss","lesson-2/widgets/InputWidget.module.scss","App.module.scss"],"names":["module","exports","noMatch","NoMatch","react_default","a","createElement","className","styles","Home","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","href","React","Component","Description","setTimeout","Prism","react_markdown_default","source","InputWidget","_ref","change","add","remove","inputValue","react","buttons","index_es","variant","onClick","type","onChange","_ref2","currentTarget","Lesson1","props","_this","call","state","updateValue","setState","currentState","_this2","_this$state","css","lesson1","codeDemo","output","InputWidget_InputWidget","val","Description_Description","Counter","initialScope","handlers","scope","_this$scope","result","set","_this$scope2","forEach","handler","concat","toConsumableArray","counter","leftButtonHandler","leftButtonLabel","rightButtonHandler","rightButtonLabel","inputChange","initialState","Lesson2","_Component","get","update","widgets_InputWidget_InputWidget","description_Description_Description","App","selectedIndex","handleListItemClick","ev","index","HashRouter","basename","process","container","spacing","item","sm","xs","component","Link","to","button","selected","Switch","Route","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fee1fb3a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"noMatch\":\"NoMatch_noMatch__1_Oca\"};","import React from 'react';\nimport styles from './NoMatch.module.scss';\n\nexport const NoMatch = () => {\n    return (\n        <div className={styles.noMatch}>404 page</div>\n    );\n};\n","import React from 'react';\n\nexport class Home extends React.Component {\n\n    render() {\n        return (\n            <div>\n                <h1>Welcome to React Typescript tutorial</h1>\n                <p>This tutorial aims to create a step by step examples on how to build a scalable one-page application\n                    with functional programming pattern in mind</p>\n                <p>In the following lessons, we will extend counter from a single component to fully scalable MVVM app\n                    by using React as dom manipulation library</p>\n                <p>You can see the source code in Github:\n                    <a href=\"https://github.com/Shwartz/react-ts-lessons\">\n                        https://github.com/Shwartz/react-ts-lessons\n                    </a>\n                </p>\n\n                <h4>Lesson 1</h4>\n                <p>Counter widget built based on ReactJS documentation</p>\n\n                <h4>Lesson 2</h4>\n                <p>The same Counter widget however we moving out logic into a model.</p>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import * as Prism from 'prismjs';\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nexport const Description = () => {\n    setTimeout(() => {\n        Prism.highlightAll();\n    }, 0);\n\n    const part1 = `\n\n### Description:\n\nWe will use a Counter Widget with three methods such as Add, Remove, Input and show the Total amount after a calculation.\n\n### What will you learn\n\n - How to use the *\\`setState\\`* method for *\\`React.Component\\`*\n - Use of Arrow functions (Lambdas) in *\\`Render()\\`* method and in props\n - Use of Typescript types for Stateless Components, interface definition and props\n\n\n### Source\n\n[https://github.com/Shwartz/react-ts-lessons/tree/master/src/lesson-1](https://github.com/Shwartz/react-ts-lessons/tree/master/src/lesson-1)\n\n\n### Methods in Class (React.Component)\n\n> *\\`React.Component\\`* is a Javascript Class.\n\n> *\\`Stateless Component\\`* is a function, with a return type of React element.\n\nIt is crucial to define Prototype methods in Javascript class with *\\`mehtodName(){}\\`*, instead of *\\`methodName = () => {}\\`*.\nSecond example will assign a default value by initialising a Class.\n\nLet's take a closer look at the setState method.\n\nAs per documentation:\n> *\\`this.props\\`* and *\\`this.state\\`* may be updated asynchronously; you should not rely on their values for calculating the next state.\n\n[ReactJS.org: State updates may be asynchronous](https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous)\n\n\n\\`\\`\\`javascript\n    ...\n    add() {\n        const {inputValue, updateValue} = this.state;\n        const result = inputValue + updateValue;\n        this.setState(\n            {\n                inputValue,\n                updateValue: result\n            }\n        );\n    }\n    ...\n\n\\`\\`\\`\n\nsetState() API accepts Object and Function. The previous example use Object to update state. Nothing wrong with an example but it could fail in some situations (also described in the documentation).\n\nSince we can use Function example below would be a recommended way.\n\n\\`\\`\\`javascript\n    ...\n    add() {\n        this.setState((currentState: IState) => {\n            const {inputValue, updateValue} = currentState;\n            const result = inputValue + updateValue;\n            return {inputValue, updateValue: result};\n        });\n    }\n    ...\n\n\\`\\`\\`\n\n`;\n\n    return (\n        <div>\n            <ReactMarkdown source={part1}/>\n\n            <hr/>\n\n            <p>To produce a counter we use main Class Lesson1 with methods add(), remove() and update(). The counter\n                itself is a /widget/InputWidget.tsx.</p>\n\n            <p>The main problem with this approach is that we can't easily reuse this widget. To reuse we need to copy\n                all the methods and a widget to the needed Class. Clearly, this would create a lot of code\n                duplication.</p>\n\n            <p>This is our Lesson1 Class:</p>\n\n            <p>InputWidget.tsx is a function where we passing values and callbacks. The component itself doesn't\n                care about where it will be placed or how values will be calculated.</p>\n\n        </div>\n    );\n};\n","import {Button, Input} from '@material-ui/core';\nimport React, {Fragment} from 'react';\nimport styles from './InputWidget.module.scss';\n\ninterface IProps {\n    change: (value: number) => void;\n    add: () => void;\n    remove: () => void;\n    inputValue: number;\n}\n\nexport const InputWidget = ({change, add, remove, inputValue}: IProps) => {\n    return (\n        <Fragment>\n            <div className={styles.buttons}>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => remove()}\n                >\n                    Remove {inputValue}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => add()}\n                >\n                    Add {inputValue}\n                </Button>\n            </div>\n            <Input\n                type=\"number\"\n                value={inputValue}\n                onChange={({currentTarget}) => change(+currentTarget.value)}\n                className={styles.inputValue}\n            />\n        </Fragment>\n    );\n};\n","import React from 'react';\nimport {Description} from './description/Description';\nimport {InputWidget} from './widgets/InputWidget';\n\nimport css from './Lesson1.module.scss';\n\ninterface IProps {\n    history: object;\n    location: object;\n    match: object;\n    staticContext: undefined;\n}\n\ninterface IState {\n    inputValue: number;\n    updateValue: number;\n}\n\nexport class Lesson1 extends React.Component {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    state: IState = {\n        inputValue: 5,\n        updateValue: 0\n    };\n\n    add() {\n        this.setState((currentState: IState) => {\n            const {inputValue, updateValue} = currentState;\n            const result = inputValue + updateValue;\n            return {inputValue, updateValue: result};\n        });\n    }\n\n    remove() {\n        this.setState((currentState: IState) => {\n            const {inputValue, updateValue} = currentState;\n            const result = updateValue - inputValue;\n            return {inputValue, updateValue: result};\n        });\n    }\n\n    updateValue(value: number) {\n        this.setState({\n            inputValue: value\n        });\n    }\n\n    render() {\n        const {inputValue, updateValue} = this.state;\n        return (\n            <div className={css.lesson1}>\n                <h1>Lesson 1 - Simple counter</h1>\n\n                <h3>Counter Widget demo</h3>\n\n                <div className={css.codeDemo}>\n                    <p className={css.output}>Total: {updateValue}</p>\n                    <InputWidget\n                        add={() => this.add()}\n                        remove={() => this.remove()}\n                        inputValue={inputValue}\n                        change={(val: number) => this.updateValue(val)}\n                    />\n                </div>\n\n                <Description/>\n            </div>\n        );\n    }\n}\n\nexport default Lesson1;\n","import * as Prism from 'prismjs';\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nexport const Description = () => {\n    setTimeout(() => {\n        Prism.highlightAll();\n    }, 0);\n\n    const part1 = `\n### What you will learn\n\n - Create counter Class and move functionality outside Component\n - Handle communication between counter Class and Component\n\n## Counter Class\n\nNow we create counter class where we move, all counter functionality outside component.\n\n> Here is advantage, if you decide to use React Native,\n> or different DOM manipulation library or framework. Counter Class will not change.\n\nThis is only one small use case, but we try to show you idea, how to plan your application, to fit in to agile environment,\nwhere functionality changes is day to day requirement.\n\nOk, because we are not yet in generic types, we will start on counter particular use case, in next lesson, we will make this\nsolution generic.\n\nFirst we need Counter Object, where we collect \\`inputValue\\` and \\`updatedValue\\`\n`;\n\n    const part2 = `\n\\`\\`\\`javascript\nexport class Lesson1 extends React.Component {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    state: IState = {\n        inputValue: 5,\n        updateValue: 0\n    };\n\n    add() {\n        this.setState((currentState: IState) => {\n            const {inputValue, updateValue} = currentState;\n            const result = inputValue + updateValue;\n            return {inputValue, updateValue: result};\n        });\n    }\n\n    remove() {\n        this.setState((currentState: IState) => {\n            const {inputValue, updateValue} = currentState;\n            const result = updateValue - inputValue;\n            return {inputValue, updateValue: result};\n        });\n    }\n\n    updateValue(value: number) {\n        this.setState({\n            inputValue: value\n        });\n    }\n\n    render() {\n        const {inputValue, updateValue} = this.state;\n        return (\n            <div className={styles.lesson1}>\n                <h1>Lesson 1 - Simple counter</h1>\n\n                <h3>Demo</h3>\n\n                <div className={styles.codeDemo}>\n                    <p className={styles.text}>Total: {updateValue}</p>\n                    <InputWidget\n                        add={() => this.add()}\n                        remove={() => this.remove()}\n                        inputValue={inputValue}\n                        change={(val) => this.updateValue(val)}\n                    />\n                </div>\n\n                <h3>Description:</h3>\n                <Description/>\n            </div>\n        );\n    }\n}\n\\`\\`\\`\n    `;\n\n    return (\n        <div>\n            <ReactMarkdown source={part1}/>\n            <ReactMarkdown source={part2}/>\n        </div>\n    );\n};\n","export interface IScope {\n    inputValue: number;\n    updateValue: number;\n}\n\ntype TCallback = (scope: IScope) => void;\n\nclass Counter {\n    private handlers: TCallback[] = [];\n    private scope: IScope;\n\n    constructor(initialScope: IScope) {\n        this.scope = initialScope;\n    }\n\n    add() {\n        const {inputValue, updateValue} = this.scope;\n        const result = inputValue + updateValue;\n        this.set({inputValue, updateValue: result});\n    }\n\n    remove() {\n        const {inputValue, updateValue} = this.scope;\n        const result = updateValue - inputValue;\n        this.set({inputValue, updateValue: result});\n    }\n\n    inputChange(value: number) {\n        const {updateValue} = this.scope;\n        this.set({inputValue: value, updateValue});\n    }\n\n    set(scope: IScope) {\n        this.scope = scope;\n        this.handlers.forEach((handler) => {\n            handler(scope);\n        });\n    }\n\n    get() {\n        return this.scope;\n    }\n\n    update(handler: TCallback) {\n        this.handlers = [...this.handlers, handler];\n    }\n\n    clear() {\n        this.handlers = [];\n    }\n}\n\nexport const counter = (initialScope: IScope) => new Counter(initialScope);\n","import {Button, Input} from '@material-ui/core';\nimport React, {Fragment} from 'react';\nimport styles from './InputWidget.module.scss';\n\ninterface IProps {\n    leftButtonHandler: () => void;\n    leftButtonLabel: string;\n    rightButtonHandler: () => void;\n    rightButtonLabel: string;\n    inputChange: (value: number) => void;\n    inputValue: number;\n}\n\nexport const InputWidget = (\n    {\n        leftButtonHandler,\n        leftButtonLabel,\n        rightButtonHandler,\n        rightButtonLabel,\n        inputChange,\n        inputValue\n    }: IProps) => {\n    return (\n        <Fragment>\n            <div className={styles.buttons}>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => leftButtonHandler()}\n                >{leftButtonLabel} {inputValue}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => rightButtonHandler()}\n                >{rightButtonLabel} {inputValue}\n                </Button>\n            </div>\n            <Input\n                type=\"number\"\n                value={inputValue}\n                onChange={\n                    ({currentTarget: {value}}) => inputChange(+value)}\n                className={styles.inputValue}\n            />\n        </Fragment>\n    );\n};\n","import React, {Component} from 'react';\nimport {Description} from './description/Description';\nimport {counter, IScope} from './model/counter';\nimport {InputWidget} from './widgets/InputWidget';\n\nimport styles from './Lesson2.module.scss';\n\ninterface IProps {\n    history: object;\n    location: object;\n    match: object;\n    staticContext: undefined;\n}\n\nconst initialState: IScope = {\n    inputValue: 5,\n    updateValue: 0\n};\n\nexport class Lesson2 extends Component<IProps> {\n    state: IScope;\n    counter = counter(initialState);\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = this.counter.get();\n        this.counter.update((scope: IScope) => {\n            this.setState(scope);\n        });\n    }\n\n    render() {\n        const {inputValue, updateValue} = this.state;\n\n        return (\n            <div className={styles.Lesson2}>\n                <h1>Lesson 2</h1>\n\n                <h3>Demo</h3>\n\n                <div className={styles.codeDemo}>\n                    <p className={styles.output}>Total: {updateValue}</p>\n                    <InputWidget\n                        leftButtonHandler={\n                            () => {\n                                this.counter.add();\n                            }\n                        }\n                        rightButtonHandler={\n                            () => {\n                                this.counter.remove();\n                            }\n                        }\n                        leftButtonLabel={`Remove`}\n                        rightButtonLabel={`Add`}\n                        inputChange={\n                            (value: number) => {\n                                this.counter.inputChange(value);\n                            }\n                        }\n                        inputValue={inputValue}\n                    />\n                </div>\n\n                <h3>Description:</h3>\n                <Description />\n            </div>\n        );\n    }\n}\n\nexport default Lesson2;\n","import {CssBaseline, Grid, List, ListItem} from '@material-ui/core';\nimport React, {Component} from 'react';\nimport {HashRouter as Router, Link, Route, Switch} from 'react-router-dom';\nimport styles from './App.module.scss';\nimport {NoMatch} from './common/pages/NoMatch';\nimport './common/prism.css';\n\nimport Home from './Home';\nimport Lesson1 from './lesson-1/Lesson1';\nimport Lesson2 from './lesson-2/Lesson2';\n\nclass App extends Component {\n    state = {\n        selectedIndex: 0,\n    };\n\n    handleListItemClick = (ev: React.MouseEvent, index: number) => {\n        this.setState({selectedIndex: index});\n    };\n\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <div className={styles.App}>\n                    <CssBaseline/>\n                    <Grid container={true} spacing={16}>\n                        <Grid item={true} sm={4} xs={12}>\n                            <List component=\"nav\">\n                                <Link to=\"/\">\n                                    <ListItem\n                                        button={true}\n                                        selected={this.state.selectedIndex === 1}\n                                        onClick={(ev) => this.handleListItemClick(ev, 1)}\n                                    >\n                                        Home\n                                    </ListItem>\n                                </Link>\n                                <Link to=\"/lesson-1\">\n                                    <ListItem\n                                        button={true}\n                                        selected={this.state.selectedIndex === 2}\n                                        onClick={(ev) => this.handleListItemClick(ev, 2)}\n                                    >\n                                        Lesson 1 - Simple counter\n                                    </ListItem>\n                                </Link>\n                                <Link to=\"/lesson-2\">\n                                    <ListItem\n                                        button={true}\n                                        selected={this.state.selectedIndex === 3}\n                                        onClick={(ev) => this.handleListItemClick(ev, 3)}\n                                    >\n                                        Lesson 2 - Simple counter\n                                    </ListItem>\n                                </Link>\n                            </List>\n                        </Grid>\n                        <Grid item={true} sm={8} xs={12}>\n                            <section>\n                                <Switch>\n                                    <Route exact={true} path=\"/\" component={Home}/>\n                                    <Route path=\"/lesson-1\" component={Lesson1}/>\n                                    <Route path=\"/lesson-2\" component={Lesson2}/>\n                                    <Route component={NoMatch}/>\n                                </Switch>\n                            </section>\n                        </Grid>\n                    </Grid>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface IConfig {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    /*console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );*/\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            /*console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );*/\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            // console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            // console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            /*console.log(\n                'No internet connection found. App is running in offline mode.'\n            );*/\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeDemo\":\"Lesson1_codeDemo__1-_Pe\",\"output\":\"Lesson1_output__10ADM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeDemo\":\"Lesson2_codeDemo__2qKgf\",\"output\":\"Lesson2_output__3Nmk0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputValue\":\"InputWidget_inputValue__2QM0w\",\"buttons\":\"InputWidget_buttons__UPT99\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputValue\":\"InputWidget_inputValue__hWEDH\",\"buttons\":\"InputWidget_buttons__1MhTv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__GDdpt\"};"],"sourceRoot":""}